{
    "contents" : "\n# Plot Inbuffers and Outbuffers\n\nPlotBuffers <- function(data=prod.data, subject = \"1\", sess = \"NoPert\", plotbuff=TRUE, plotident=TRUE){\n  d <- prod.data[which((prod.data$subj== subject) & prod.data$session==sess),]\n  d <- droplevels(d)\n  meanF1 <- mean(d[,'in.f1.50'], na.rm=T)\n  meanF2 <- mean(d[,'in.f2.50'], na.rm=T)\n  sdF1 <- sd(d[,'in.f1.50'], na.rm=T)\n  sdF2 <- sd(d[,'in.f2.50'], na.rm=T)\n  \n  d <- d[which(d[,'in.f1.50'] < meanF1 + 2*sdF1 & d[,'in.f1.50'] > meanF1 - 2*sdF1),]\n  d <- d[which(d[,'in.f2.50'] < meanF2 + 2*sdF2 & d[,'in.f2.50'] > meanF2 - 2*sdF2),]\n  \n  f1Baseline = mean(d[,'in.f1.50'][which(d$block==1)], na.rm=T)\n  f2Baseline = mean(d[,'in.f2.50'][which(d$block==1)], na.rm=T)\n  \n  block.size= max(d$trial)/max(d$block)\n  #create plots with baselines\n  if(plotbuff==TRUE){\n    plot(c(1,max(d$trial)), c(0, 3500), type='n', xlab=\"trial\", ylab=\"frequency\", main=sess)\n    points(d$trial, d[,'in.f1.50'], col='red')\n    points(d$trial, d[,'in.f2.50'], col = 'red', pch=3)\n    abline(h=f1Baseline)\n    abline(lm(d[,'in.f1.50']~trial, data=d), lty=\"dashed\")\n    points(d$trial, d[,'out.f1.50'], col='blue')\n    points(d$trial, d[,'out.f2.50'], col='blue', pch=3)\n    abline(h=f2Baseline)\n    abline(lm(d[,'in.f2.50']~trial, data=d), lty=\"dashed\")\n    abline(v=block.size, lty=\"dotted\")\n    abline(v=block.size*2, lty=\"dotted\")\n    abline(v=block.size*3, lty=\"dotted\")\n    \n    if(max(d$block) > 3 ){\n      abline(v=block.size*4, lty=\"dotted\")\n      abline(v=block.size*5, lty=\"dotted\")\n    }\n  }\n  \n  # add identification data\n  if(plotident==TRUE){\n    par(new=T)\n    d.ident <- ident.summarized.data[which(ident.summarized.data$subj==subject & ident.summarized.data$session==sess),]\n    d.ident <- droplevels(d.ident)\n    plot(d.ident$proportion, xlab=NA, ylab=NA, axes=F, ylim=c(0,1), cex=3)\n    axis(side=4)\n    lines(d.ident$proportion, xlab=NA, ylab=NA, ylim=c(0,1), cex=3)\n  }\n\n  # measure difference between inbuffer and baseline\n  #return(cbind( with(d, tapply(in.f1.50, block, mean)) -f1Baseline, with(d, tapply(in.f2.50, block, mean))-f2Baseline))\n}",
    "created" : 1419439965796.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2856329190",
    "id" : "FD0D794E",
    "lastKnownWriteTime" : 1419470394,
    "path" : "~/Documents/Git/sample_expr/PlotBuffers.R",
    "project_path" : "PlotBuffers.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}