{
    "contents" : "# Copyright: Will Schuerman. Monday, August 25th, 2014.\n\n# Initial inspection of see_she_expr identification ident.data.\n\n# File Description:\n\n# Packages \n\nrequire(ggplot2)\nrequire(bear)\nrequire(drc)\n\n## Read in ident.data ##\ntext_files <- dir(\"Identification_data/\")\n\nident.data = data.frame(1,1,1,1,1,'s')\nnames(ident.data) <- c(\"subj\", \"trial\", \"stimulus\" , \"response\", \"block\", \"session\")\nfor(text_file in text_files){\n  tmp <- read.table(file=paste(\"Identification_data/\", text_file, sep=\"\"), header = T)\n  if(length(grep(\"YESPERT\", text_file))>0){\n    tmp$session <- \"YesPert\"\n  }else{\n    tmp$session <- \"NoPert\"\n  }\n  ident.data <- rbind(ident.data, tmp)\n}\nident.data = ident.data[-1,]\n\n# Convert to factors \nident.data$subj <- factor(ident.data$subj)\nident.data$trial <- factor(ident.data$trial)\nident.data$session <- factor(ident.data$session)\n\n# fix times when participants definitely hit the wrong button \nident.data$response[which(ident.data$response==2 & ident.data$stimulus == 0)] <- 1\nident.data$response[which(ident.data$response==1 & ident.data$stimulus == 100)] <- 2\n\n# fix times when participants hit the number 3\nident.data$response[which(ident.data$response==3)] <- 2\n\n# subtract 1 from the responses to make it 0 and 1\nident.data$response <- ident.data$response -1\n\n# keep a record of old stimulus values\nident.data$old.stimulus <- ident.data$stimulus\n\n# change all 100s to 2 more than the participant's max\nwith(ident.data, tapply(stimulus, subj, max))\n\nmax_stimuli <- with(ident.data[which(ident.data$stimulus!=100),], tapply(stimulus, subj, max))\nmax_stimuli <- data.frame(max_stimuli)\nmax_stimuli$subj <- row.names(max_stimuli)\n\nfor(subj in unique(ident.data$subj)){\n  ident.data$stimulus[which(ident.data$stimulus==100 & ident.data$subj==subj)] <- max_stimuli$max_stimuli[which(max_stimuli$subj==subj)] + 2\n}\n\n# change all 0s to 2 less than the participant's min\nmin_stimuli <- with(ident.data[which(ident.data$stimulus!=0),], tapply(stimulus, subj, min))\nmin_stimuli <- data.frame(min_stimuli)\nmin_stimuli$subj <- row.names(min_stimuli)\n\nfor(subj in unique(ident.data$subj)){\n  if(subj != 11){\n    ident.data$stimulus[which(ident.data$stimulus==0 & ident.data$subj==subj)] <- min_stimuli$min_stimuli[which(min_stimuli$subj==subj)] - 2\n  }\n}\nwith(ident.data, tapply(stimulus, subj, min))\n\n# remove participant 1 (me) and uncle dennis (2)\nident.data <- ident.data[which(!(ident.data$subj %in% c('1', '2'))),]\nident.data <- droplevels(ident.data)\n\n# move block down by one, so that block 0 is the pre-test\nident.data$block <- ident.data$block-1\n\n\n# create a variable to bin stimuli. \n\nident.data$bin.stimulus <- ident.data$stimulus\nfor(subj in levels(ident.data$subj)){\n  stimulus.numbers <- sort(unique(ident.data$stimulus[which(ident.data$subj==subj)]))\n  \n}\n\n\n\n\n# summarize and graph\n\npd <- position_dodge(.1)\nd.summary <- summarySE(ident.data, measurevar=\"response\", groupvars=c(\"session\", \"block\"))\nggplot(d.summary, aes(x=block, y=response, group=session,colour=session)) + \n  geom_errorbar(aes(ymin=response-se, ymax=response+se), width=.1, position=pd) +\n  geom_line(position=pd) +\n  geom_point(position=pd, size=3)\n\n\n\n# ddply to summarise identident.data\nident.summarized.data <- ddply(ident.data, c(\"subj\", \"block\", \"session\"), summarise, mean(response))\n\n\n# rename variable.\nnames(ident.summarized.data) <- c(\"subj\", \"block\", \"session\", \"proportion\")\n\n# set proportion of block 1 to 0 for each session, and see how boundary changes over time. \nident.summarized.data <- ddply(ident.summarized.data, c(\"subj\", \"session\"), transform, centered.proportion = proportion-proportion[which(block==0)])\n\n\n# set proportion of block 1 to 0 for each session, and see how boundary changes over time.\nident.summarized.data$change.proportion <- 0\nfor(session in levels(ident.summarized.data$session)){\n  for(subj in levels(ident.summarized.data$subj)){\n    for(block in c(1:6)){\n      if(length(ident.summarized.data$proportion[which(ident.summarized.data$session==session & ident.summarized.data$subj==subj & ident.summarized.data$block==block)]) >0){\n        tmp.prop <- ident.summarized.data$proportion[which(ident.summarized.data$session==session & ident.summarized.data$subj==subj & ident.summarized.data$block==block)]\n        tmp.prop.2 <- ident.summarized.data$proportion[which(ident.summarized.data$session==session & ident.summarized.data$subj==subj & ident.summarized.data$block==block-1)]\n        ident.summarized.data$change.proportion[which(ident.summarized.data$session==session & ident.summarized.data$subj==subj & ident.summarized.data$block==block)] <- tmp.prop.2 - tmp.prop\n      }\n    }\n  }\n}\n\nid.interp <- data.frame('NoPert', 3, 4, 8, 9)\nnames(id.interp) <- c(\"session\", \"subj\", \"block\", \"new.response\", \"new.stimulus\")\nfor(session in levels(ident.data$session)){\n  for(subj in levels(ident.data$subj)){\n    for(block in c(0:max(ident.data$block[ident.data$session==session & ident.data$subj==subj]))){\n      new.stimulus <- MeasureIdent(subj, block, session)\n      tmp <- as.data.frame(cbind(session, subj, block, new.stimulus))\n      names(tmp) <- c(\"session\", \"subj\", \"block\", \"new.response\", \"new.stimulus\")\n      id.interp <- rbind(id.interp, tmp)\n    }\n  }\n}\nid.interp <- id.interp[-1,]\nid.interp$subj <- as.factor(id.interp$subj)\nid.interp$block <- as.numeric(id.interp$block)\nid.interp$new.response <- as.numeric(id.interp$new.response)\nid.interp$new.stimulus <- as.numeric(id.interp$new.stimulus)\n\n\n\n## TO TEST OUT THE NEW THING\n\n\n# ddply to summarise identident.data\nident.summarized.data <- ddply(id.interp, c(\"subj\", \"block\", \"session\"), summarise, mean(new.response))\n\n\n# rename variable.\nnames(ident.summarized.data) <- c(\"subj\", \"block\", \"session\", \"proportion\")\n\n# set proportion of block 1 to 0 for each session, and see how boundary changes over time. \nident.summarized.data <- ddply(ident.summarized.data, c(\"subj\", \"session\"), transform, centered.proportion = proportion-proportion[which(block==0)])\n\n\n# set proportion of block 1 to 0 for each session, and see how boundary changes over time.\nident.summarized.data$change.proportion <- 0\nfor(session in levels(ident.summarized.data$session)){\n  for(subj in levels(ident.summarized.data$subj)){\n    for(block in c(1:6)){\n      if(length(ident.summarized.data$proportion[which(ident.summarized.data$session==session & ident.summarized.data$subj==subj & ident.summarized.data$block==block)]) >0){\n        tmp.prop <- ident.summarized.data$proportion[which(ident.summarized.data$session==session & ident.summarized.data$subj==subj & ident.summarized.data$block==block)]\n        tmp.prop.2 <- ident.summarized.data$proportion[which(ident.summarized.data$session==session & ident.summarized.data$subj==subj & ident.summarized.data$block==block-1)]\n        ident.summarized.data$change.proportion[which(ident.summarized.data$session==session & ident.summarized.data$subj==subj & ident.summarized.data$block==block)] <- tmp.prop.2 - tmp.prop\n      }\n    }\n  }\n}\n\n\n\n\n\n\n\n# \n# # old method with model fitting\n#  \n# # ddply to summarise identident.data\n# ident.summarized.data <- ddply(ident.data, c(\"subj\", \"block\", \"session\"), summarise, MeasureIdent(subj, block, session))\n# \n# # rename variable.\n# names(ident.summarized.data) <- c(\"subj\", \"block\", \"session\", \"boundary\")\n# \n# # set boundary of block 1 to 0 for each session, and see how boundary changes over time. \n# ident.summarized.data <- ddply(ident.summarized.data, c(\"subj\", \"session\"), transform, centered.boundary = boundary-boundary[which(block==1)])\n# \n# \n# # get rid of clear cases in which the logistic function failed. Will deal with these later. \n# ident.summarized.data <- ident.summarized.data[which(ident.summarized.data$boundary < 100),]\n# ident.summarized.data <- ident.summarized.data[which(ident.summarized.data$centered.boundary > -100),]\n# \n# ident.summarized.data <- ddply(ident.summarized.data, c(\"block\", \"session\"), transform, zBoundary = scale(centered.boundary))\n# \n# \n# # examining cases in which the 4-parameter logistic model failed to find a reasonable boundary. \n# \n# \n# \n# d.summary <- summarySE(ident.summarized.data, measurevar=\"proportion\", groupvars=c(\"block\", \"session\"), na.rm=T)\n# \n# ggplot(d.summary, aes(x=as.factor(block), y=proportion, fill=session))+\n#   geom_bar(position=position_dodge(), stat=\"identity\")+\n#   geom_errorbar(aes(ymin=proportion-se, ymax=proportion+se),\n#                 width=.2,                    # Width of the error bars\n#                 position=position_dodge(.9))\n# \n\n\n\nident.summarized.data <- ddply(ident.summarized.data, c(\"subj\", \"session\"), transform, z.centered.proportion = scale(proportion))\n\nd.summary <- summarySE(ident.summarized.data, measurevar=\"z.proportion\", groupvars=c(\"session\", \"block\"))\nggplot(d.summary, aes(x=as.factor(block), y=z.proportion, colour=session,group=session))+\n  geom_line()+\n  geom_point()+  geom_errorbar(aes(ymin=z.proportion-se, ymax=z.proportion+se),\n                               width=.2)              # Width of the error bars\n\n\nd.summary2 <- summarySE(ident.summarized.data, measurevar=\"z.proportion\", groupvars=c(\"session\", \"block\"))\nggplot(d.summary, aes(x=as.factor(block), y=z.proportion, colour=session,group=session))+\n  geom_line()+\n  geom_point()+  geom_errorbar(aes(ymin=z.proportion-se, ymax=z.proportion+se),\n                               width=.2)              # Width of the error bars\n\n",
    "created" : 1412846865642.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1214288558",
    "id" : "13ED3D2D",
    "lastKnownWriteTime" : 1416836042,
    "path" : "U:/Projects/git_projects/see_she_expr/see_she_expr_analysis_1/SeeShe_InitialInspection.R",
    "project_path" : "SeeShe_InitialInspection.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}